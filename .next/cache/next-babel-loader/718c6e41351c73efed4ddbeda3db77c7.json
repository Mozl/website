{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from 'node-fetch';\nimport { useRouter } from 'next/router';\n\nconst Post = ({\n  post\n}) => {\n  const router = useRouter(); // If the page is not yet generated, this will be displayed\n  // initially until getStaticProps() finishes running\n\n  if (router.isFallback) {\n    return __jsx(\"div\", null, \"Loading...\");\n  }\n\n  return __jsx(\"div\", null, post.title);\n}; // This function gets called at build time\n\n\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  // const res = await fetch('https://jsonplaceholder.typicode.com/posts')\n  // const posts = await res.json()\n  // // Get the paths we want to pre-render based on posts\n  // const paths = posts.map(post => `/posts/${post.id}`)\n  return {\n    paths: [{\n      params: {\n        id: '1'\n      }\n    }, {\n      params: {\n        id: '2'\n      }\n    }],\n    fallback: true\n  }; // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  // return { paths, fallback: false }\n}\nexport async function getStaticProps({\n  params\n}) {\n  // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n  const res = await fetch(`https://jsonplaceholder.typicode.com/posts/${params.id}`);\n  const post = await res.json(); // Pass post data to the page via props\n\n  return {\n    props: {\n      post\n    }\n  };\n}\nexport default Post;","map":null,"metadata":{},"sourceType":"module"}